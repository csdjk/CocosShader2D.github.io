[1,["fdXgkjl+pEjpfw+rmlJI7Y@6c48a","c1ClTlyOBMQ6izu2ToaR6U"],["frontTexture","_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_states","_defines","_props"],0,12]],[[0,0,1,2,4],[1,0,1,2,3,4]],[[[[0,"../Shaders/sprite-universal-mask",[{"hash":485743160,"name":"../Shaders/sprite-universal-mask|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tiling","type":16,"count":1},{"name":"frontColor","type":16,"count":1},{"name":"center","type":16,"count":1},{"name":"roundness","type":13,"count":1},{"name":"smoothness","type":13,"count":1},{"name":"intensity","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"frontTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tiling;\n  vec4 frontColor;\n  vec4 center;\n  float roundness;\n  float smoothness;\n  float intensity;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_vertexColor;\nout vec2 v_uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_texCoord;\n  v_vertexColor = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tiling;\n  vec4 frontColor;\n  vec4 center;\n  float roundness;\n  float smoothness;\n  float intensity;\n};\n#ifndef SHAPE_INCLUDE\n#define SHAPE_INCLUDE\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#ifndef COMMON_INCLUDE\n#define COMMON_INCLUDE\nfloat saturate(float x) {\n  return clamp(x, 0.0, 1.0);\n}\nvec2 saturate(vec2 x) {\n  return clamp(x, vec2(0.0), vec2(1.0));\n}\nvec3 saturate(vec3 x) {\n  return clamp(x, vec3(0.0), vec3(1.0));\n}\nvec4 saturate(vec4 x) {\n  return clamp(x, vec4(0.0), vec4(1.0));\n}\n#endif\nfloat UniversalMask2D(vec2 uv, vec2 center, float intensity, float roundness, float smoothness) {\n    vec2 d = abs(uv - center) * intensity;\n    d = pow(saturate(d), vec2(roundness));\n    float dist = length(d);\n    float vfactor = pow(saturate(1.0 - dist * dist), smoothness);\n    return vfactor;\n}\n#endif\nin vec4 v_vertexColor;\nin vec2 v_uv0;\nuniform sampler2D cc_spriteTexture;\nuniform sampler2D frontTexture;\nvec4 frag() {\n  vec2 scale = vec2(cc_screenSize.x / cc_screenSize.y, 1);\n  vec4 color = texture(cc_spriteTexture, v_uv0);\n  float mask = UniversalMask2D(v_uv0, center.xy, intensity, roundness, smoothness);\n  vec4 front = frontColor;\n  #if USE_FRONT_TEXTURE\n    front = texture(frontTexture, v_uv0) * front;\n  #endif\n  color.rgb = mix(front , color, mask).rgb;\n  color *= v_vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_vertexColor;\nvarying vec2 v_uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_texCoord;\n  v_vertexColor = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n    uniform vec4 frontColor;\n    uniform vec4 center;\n    uniform float roundness;\n    uniform float smoothness;\n    uniform float intensity;\n#ifndef SHAPE_INCLUDE\n#define SHAPE_INCLUDE\nuniform mediump vec4 cc_screenSize;\n#ifndef COMMON_INCLUDE\n#define COMMON_INCLUDE\nfloat saturate(float x) {\n  return clamp(x, 0.0, 1.0);\n}\nvec2 saturate(vec2 x) {\n  return clamp(x, vec2(0.0), vec2(1.0));\n}\nvec3 saturate(vec3 x) {\n  return clamp(x, vec3(0.0), vec3(1.0));\n}\nvec4 saturate(vec4 x) {\n  return clamp(x, vec4(0.0), vec4(1.0));\n}\n#endif\nfloat UniversalMask2D(vec2 uv, vec2 center, float intensity, float roundness, float smoothness) {\n    vec2 d = abs(uv - center) * intensity;\n    d = pow(saturate(d), vec2(roundness));\n    float dist = length(d);\n    float vfactor = pow(saturate(1.0 - dist * dist), smoothness);\n    return vfactor;\n}\n#endif\nvarying vec4 v_vertexColor;\nvarying vec2 v_uv0;\nuniform sampler2D cc_spriteTexture;\nuniform sampler2D frontTexture;\nvec4 frag() {\n  vec2 scale = vec2(cc_screenSize.x / cc_screenSize.y, 1);\n  vec4 color = texture2D(cc_spriteTexture, v_uv0);\n  float mask = UniversalMask2D(v_uv0, center.xy, intensity, roundness, smoothness);\n  vec4 front = frontColor;\n  #if USE_FRONT_TEXTURE\n    front = texture2D(frontTexture, v_uv0) * front;\n  #endif\n  color.rgb = mix(front , color, mask).rgb;\n  color *= v_vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":50,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":51}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_FRONT_TEXTURE","type":"boolean"}]}],[{"name":"sprite-universal-mask","passes":[{"program":"../Shaders/sprite-universal-mask|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"frontColor":{"type":16,"value":[0,0,0,0]},"frontTexture":{"value":"black","type":28},"center":{"type":16,"value":[0.5,0.5,0,0]},"intensity":{"type":13,"value":[2.5]},"roundness":{"type":13,"value":[10]},"smoothness":{"type":13,"value":[0.25]}}}]}]]],0,0,[],[],[]],[[[1,"sprite-universal-mask",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{"alphaThreshold":0,"intensity":0,"roundness":1,"smoothness":0.5},"frontTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]]]]
