[1,["08+zytO5lDA6YM3O8Gqe3a@6c48a","87FR6ucgdJbIwJFcHeN/pt"],["flowTexture","_effectAsset"],[["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,4],[1,0,1,2,4]],[[[[0,"sprite-flow",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_SINGLE_CHANNEL_FLOW":true}],[[[{"alphaThreshold":0,"flowSpeedX":0.3,"flowSpeedY":0.64,"threshold":0.53},"flowColor",8,[4,3040151497],"tiling",8,[2,3,0.6,0,0],"flowTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]],[[[1,"../Shaders/sprite-flow",[{"hash":1877295254,"name":"../Shaders/sprite-flow|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tiling","type":16,"count":1},{"name":"flowColor","type":16,"count":1},{"name":"flowSpeedX","type":13,"count":1},{"name":"flowSpeedY","type":13,"count":1},{"name":"threshold","type":13,"count":1},{"name":"smoothness","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"flowTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tiling;\n  vec4 flowColor;\n  float flowSpeedX;\n  float flowSpeedY;\n  float threshold;\n  float smoothness;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 vertexColor;\nout vec4 uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0.xy = a_texCoord;\n  uv0.zw = a_texCoord * tiling.xy + vec2(flowSpeedX, flowSpeedY) * cc_time.x;\n  vertexColor = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tiling;\n  vec4 flowColor;\n  float flowSpeedX;\n  float flowSpeedY;\n  float threshold;\n  float smoothness;\n};\n#ifndef COLOR_INCLUDE\n#define COLOR_INCLUDE\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat SmoothValue(float threshold, float smoothness, float value) {\n  float minValue = threshold - smoothness;\n  float maxValue = threshold + smoothness;\n  return smoothstep(minValue, maxValue, value);\n}\n#endif\nin vec4 vertexColor;\nin vec4 uv0;\nuniform sampler2D cc_spriteTexture;\nuniform sampler2D flowTexture;\nvec4 frag() {\n  vec4 color = texture(cc_spriteTexture, uv0.xy);\n  vec4 flow = texture(flowTexture, uv0.zw);\n  #if USE_SINGLE_CHANNEL_FLOW\n    float flowValue = SmoothValue(threshold, smoothness, flow.r);\n    flow.rgb = flowColor.rgb * flowColor.a * flowValue;\n  #else\n    flow.rgb = flowColor.rgb * flowColor.a * flow.rgb;\n  #endif\n  color.rgb += flow.rgb;\n  color *= vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matViewProj;\n     uniform vec4 tiling;\n     uniform float flowSpeedX;\n     uniform float flowSpeedY;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 vertexColor;\nvarying vec4 uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0.xy = a_texCoord;\n  uv0.zw = a_texCoord * tiling.xy + vec2(flowSpeedX, flowSpeedY) * cc_time.x;\n  vertexColor = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n    uniform vec4 flowColor;\n    uniform float threshold;\n    uniform float smoothness;\n#ifndef COLOR_INCLUDE\n#define COLOR_INCLUDE\nfloat SmoothValue(float threshold, float smoothness, float value) {\n  float minValue = threshold - smoothness;\n  float maxValue = threshold + smoothness;\n  return smoothstep(minValue, maxValue, value);\n}\n#endif\nvarying vec4 vertexColor;\nvarying vec4 uv0;\nuniform sampler2D cc_spriteTexture;\nuniform sampler2D flowTexture;\nvec4 frag() {\n  vec4 color = texture2D(cc_spriteTexture, uv0.xy);\n  vec4 flow = texture2D(flowTexture, uv0.zw);\n  #if USE_SINGLE_CHANNEL_FLOW\n    float flowValue = SmoothValue(threshold, smoothness, flow.r);\n    flow.rgb = flowColor.rgb * flowColor.a * flowValue;\n  #else\n    flow.rgb = flowColor.rgb * flowColor.a * flow.rgb;\n  #endif\n  color.rgb += flow.rgb;\n  color *= vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":50,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":51}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_SINGLE_CHANNEL_FLOW","type":"boolean"}]}],[{"passes":[{"program":"../Shaders/sprite-flow|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"flowColor":{"type":16,"value":[1,1,1,1]},"flowTexture":{"value":"black","type":28},"tiling":{"type":16,"value":[1,1,0,0]},"flowSpeedX":{"type":13,"value":[1]},"flowSpeedY":{"type":13,"value":[1]},"threshold":{"type":13,"value":[0.5]},"smoothness":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]
