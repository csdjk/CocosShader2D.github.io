[1,["940cfdcf-20cb-48b1-9888-fb1e0717c0c3"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_props","_states","_defines"],-1]],[[0,0,1,2,4],[1,0,1,2,3,5]],[[[[0,"../Shaders/sprite-glitchArt",[{"hash":461308667,"name":"../Shaders/sprite-glitchArt|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"_ScanLineJitter","type":13,"count":1},{"name":"_VerticalJump","type":13,"count":1},{"name":"_HorizontalShake","type":13,"count":1},{"name":"_ColorDrift","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"_ScanLineJitter","type":13,"count":1},{"name":"_VerticalJump","type":13,"count":1},{"name":"_HorizontalShake","type":13,"count":1},{"name":"_ColorDrift","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  float _ScanLineJitter;\n  float _VerticalJump;\n  float _HorizontalShake;\n  float _ColorDrift;\n};\n#ifndef COMMON_INCLUDE\n#define COMMON_INCLUDE\nfloat saturate(float x) {\n  return clamp(x, 0.0, 1.0);\n}\nvec2 saturate(vec2 x) {\n  return clamp(x, vec2(0.0), vec2(1.0));\n}\nvec3 saturate(vec3 x) {\n  return clamp(x, vec3(0.0), vec3(1.0));\n}\nvec4 saturate(vec4 x) {\n  return clamp(x, vec4(0.0), vec4(1.0));\n}\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_vertexColor;\nout vec2 v_uv0;\nout vec4 v_scanLineJitter;\nout vec4 v_colorDrift;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_texCoord;\n  v_vertexColor = a_color;\n  float time_20 = cc_time.x * 0.05;\n  float sl_thresh = saturate(1.0 - _ScanLineJitter * 1.2);\n  float sl_disp = 0.002 + pow(_ScanLineJitter, 3.0) * 0.05;\n  float verticalJump = _VerticalJump;\n  float verticalJumpTime = time_20 * verticalJump;\n  float horizontalShake = _HorizontalShake * 0.2;\n  float colorDrift = _ColorDrift * 0.04;\n  float time = time_20 * 606.11;\n  v_scanLineJitter = vec4(sl_disp, sl_thresh, abs(verticalJump), verticalJumpTime);\n  v_colorDrift = vec4(colorDrift,  horizontalShake,time, time_20);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#ifndef COMMON_INCLUDE\n#define COMMON_INCLUDE\nfloat nrand(float x, float y) {\n  return fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453);\n}\n#endif\nin vec4 v_vertexColor;\nin vec2 v_uv0;\nin vec4 v_scanLineJitter;\nin vec4 v_colorDrift;\nuniform sampler2D cc_spriteTexture;\nvec4 frag() {\n  float sl_disp = v_scanLineJitter.x;\n  float sl_thresh = v_scanLineJitter.y;\n  float verticalJump = v_scanLineJitter.z;\n  float verticalJumpTime = v_scanLineJitter.w;\n  float colorDrift = v_colorDrift.x;\n  float horizontalShake = v_colorDrift.y;\n  float time = v_colorDrift.z;\n  float time_20 = v_colorDrift.w;\n  float u = v_uv0.x;\n  float v = v_uv0.y;\n  float jitter = nrand(v, time_20) * 2.0 - 1.0;\n  jitter *= step(sl_thresh, abs(jitter)) * sl_disp;\n  float jump = mix(v, fract(v + verticalJumpTime), verticalJump);\n  float shake = (nrand(time_20, 2.0) - 0.5) * horizontalShake;\n  float drift = sin(jump + time) * colorDrift;\n  vec4 src1 = texture(cc_spriteTexture, fract(vec2(u + jitter + shake, jump)));\n  vec4 src2 = texture(cc_spriteTexture, fract(vec2(u + jitter + shake + drift, jump)));\n  vec4 color = vec4(src1.r, src2.g, src1.b, src1.a);\n  color *= v_vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matViewProj;\n     uniform float _ScanLineJitter;\n     uniform float _VerticalJump;\n     uniform float _HorizontalShake;\n     uniform float _ColorDrift;\n#ifndef COMMON_INCLUDE\n#define COMMON_INCLUDE\nfloat saturate(float x) {\n  return clamp(x, 0.0, 1.0);\n}\nvec2 saturate(vec2 x) {\n  return clamp(x, vec2(0.0), vec2(1.0));\n}\nvec3 saturate(vec3 x) {\n  return clamp(x, vec3(0.0), vec3(1.0));\n}\nvec4 saturate(vec4 x) {\n  return clamp(x, vec4(0.0), vec4(1.0));\n}\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_vertexColor;\nvarying vec2 v_uv0;\nvarying vec4 v_scanLineJitter;\nvarying vec4 v_colorDrift;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_texCoord;\n  v_vertexColor = a_color;\n  float time_20 = cc_time.x * 0.05;\n  float sl_thresh = saturate(1.0 - _ScanLineJitter * 1.2);\n  float sl_disp = 0.002 + pow(_ScanLineJitter, 3.0) * 0.05;\n  float verticalJump = _VerticalJump;\n  float verticalJumpTime = time_20 * verticalJump;\n  float horizontalShake = _HorizontalShake * 0.2;\n  float colorDrift = _ColorDrift * 0.04;\n  float time = time_20 * 606.11;\n  v_scanLineJitter = vec4(sl_disp, sl_thresh, abs(verticalJump), verticalJumpTime);\n  v_colorDrift = vec4(colorDrift,  horizontalShake,time, time_20);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#ifndef COMMON_INCLUDE\n#define COMMON_INCLUDE\nfloat nrand(float x, float y) {\n  return fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453);\n}\n#endif\nvarying vec4 v_vertexColor;\nvarying vec2 v_uv0;\nvarying vec4 v_scanLineJitter;\nvarying vec4 v_colorDrift;\nuniform sampler2D cc_spriteTexture;\nvec4 frag() {\n  float sl_disp = v_scanLineJitter.x;\n  float sl_thresh = v_scanLineJitter.y;\n  float verticalJump = v_scanLineJitter.z;\n  float verticalJumpTime = v_scanLineJitter.w;\n  float colorDrift = v_colorDrift.x;\n  float horizontalShake = v_colorDrift.y;\n  float time = v_colorDrift.z;\n  float time_20 = v_colorDrift.w;\n  float u = v_uv0.x;\n  float v = v_uv0.y;\n  float jitter = nrand(v, time_20) * 2.0 - 1.0;\n  jitter *= step(sl_thresh, abs(jitter)) * sl_disp;\n  float jump = mix(v, fract(v + verticalJumpTime), verticalJump);\n  float shake = (nrand(time_20, 2.0) - 0.5) * horizontalShake;\n  float drift = sin(jump + time) * colorDrift;\n  vec4 src1 = texture2D(cc_spriteTexture, fract(vec2(u + jitter + shake, jump)));\n  vec4 src2 = texture2D(cc_spriteTexture, fract(vec2(u + jitter + shake + drift, jump)));\n  vec4 color = vec4(src1.r, src2.g, src1.b, src1.a);\n  color *= v_vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean"}]}],[{"passes":[{"program":"../Shaders/sprite-glitchArt|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"_ScanLineJitter":{"type":13,"value":[0.5]},"_ColorDrift":{"type":13,"value":[0.2]},"_VerticalJump":{"type":13,"value":[0]},"_HorizontalShake":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[[1,"sprite-glitchArt",[{"_ScanLineJitter":0.41}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[0],[0]]]]
