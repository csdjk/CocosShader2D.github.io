[1,["ad0251ca-172c-4581-95cf-b91b2a7a0526"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_states","_defines","_props"],0,12]],[[0,0,1,2,4],[1,0,1,2,3,4]],[[[[0,"../Shaders/sprite-outline",[{"hash":580979160,"name":"../Shaders/sprite-outline|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"_LineColor","type":16,"count":1},{"name":"_TexelSize","type":14,"count":1},{"name":"_LineWidth","type":13,"count":1},{"name":"test","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"_Noisetex","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"_LineColor","type":16,"count":1},{"name":"_TexelSize","type":14,"count":1},{"name":"_LineWidth","type":13,"count":1},{"name":"test","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"_Noisetex","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 _LineColor;\n  vec2 _TexelSize;\n  float _LineWidth;\n  float test;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_vertexColor;\nout vec2 v_uv0;\nout vec4 v_uv1;\nout vec4 v_uv2;\n#if USE_HIGH_SAMPLER\n  out vec4 v_uv3;\n  out vec4 v_uv4;\n#endif\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_vertexColor = a_color;\n  vec2 width = _LineWidth * _TexelSize.xy;\n  v_uv0 = a_texCoord;\n  v_uv1.xy = v_uv0 + vec2(0.0, 1.0) * width;\n  v_uv1.zw = v_uv0 + vec2(0.0, - 1.0) * width;\n  v_uv2.xy = v_uv0 + vec2(-1.0, 0.0) * width;\n  v_uv2.zw = v_uv0 + vec2(1.0, 0.0) * width;\n  #if USE_HIGH_SAMPLER\n    v_uv3.xy = v_uv0 + vec2(-1.0, - 1.0) * width;\n    v_uv3.zw = v_uv0 + vec2(1.0, 1.0) * width;\n    v_uv4.xy = v_uv0 + vec2(-1.0, 1.0) * width;\n    v_uv4.zw = v_uv0 + vec2(1.0, - 1.0) * width;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#ifndef COLOR_INCLUDE\n#define COLOR_INCLUDE\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 _LineColor;\n  vec2 _TexelSize;\n  float _LineWidth;\n  float test;\n};\nin vec4 v_vertexColor;\nin vec2 v_uv0;\nin vec4 v_uv1;\nin vec4 v_uv2;\n#if USE_HIGH_SAMPLER\n  in vec4 v_uv3;\n  in vec4 v_uv4;\n#endif\nuniform sampler2D cc_spriteTexture;\nuniform sampler2D _Noisetex;\nvec4 frag() {\n  vec4 color0 = texture(cc_spriteTexture, v_uv1.xy);\n  vec4 color1 = texture(cc_spriteTexture, v_uv1.zw);\n  vec4 color2 = texture(cc_spriteTexture, v_uv2.xy);\n  vec4 color3 = texture(cc_spriteTexture, v_uv2.zw);\n  float w = color0.a * color1.a * color2.a * color3.a;\n  #if USE_HIGH_SAMPLER\n    vec4 color4 = texture(cc_spriteTexture, v_uv3.xy);\n    vec4 color5 = texture(cc_spriteTexture, v_uv3.zw);\n    vec4 color6 = texture(cc_spriteTexture, v_uv4.xy);\n    vec4 color7 = texture(cc_spriteTexture, v_uv4.zw);\n    w *= color4.a * color5.a * color6.a * color7.a;\n  #endif\n  vec4 color = texture(cc_spriteTexture, v_uv0);\n  color.xyz = mix(_LineColor.rgb, color.rgb, w);\n  color *= v_vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n   uniform vec2 _TexelSize;\n   uniform float _LineWidth;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_vertexColor;\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\n#if USE_HIGH_SAMPLER\n  varying vec4 v_uv3;\n  varying vec4 v_uv4;\n#endif\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_vertexColor = a_color;\n  vec2 width = _LineWidth * _TexelSize.xy;\n  v_uv0 = a_texCoord;\n  v_uv1.xy = v_uv0 + vec2(0.0, 1.0) * width;\n  v_uv1.zw = v_uv0 + vec2(0.0, - 1.0) * width;\n  v_uv2.xy = v_uv0 + vec2(-1.0, 0.0) * width;\n  v_uv2.zw = v_uv0 + vec2(1.0, 0.0) * width;\n  #if USE_HIGH_SAMPLER\n    v_uv3.xy = v_uv0 + vec2(-1.0, - 1.0) * width;\n    v_uv3.zw = v_uv0 + vec2(1.0, 1.0) * width;\n    v_uv4.xy = v_uv0 + vec2(-1.0, 1.0) * width;\n    v_uv4.zw = v_uv0 + vec2(1.0, - 1.0) * width;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#ifndef COLOR_INCLUDE\n#define COLOR_INCLUDE\n#endif\n   uniform vec4 _LineColor;\nvarying vec4 v_vertexColor;\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\n#if USE_HIGH_SAMPLER\n  varying vec4 v_uv3;\n  varying vec4 v_uv4;\n#endif\nuniform sampler2D cc_spriteTexture;\nuniform sampler2D _Noisetex;\nvec4 frag() {\n  vec4 color0 = texture2D(cc_spriteTexture, v_uv1.xy);\n  vec4 color1 = texture2D(cc_spriteTexture, v_uv1.zw);\n  vec4 color2 = texture2D(cc_spriteTexture, v_uv2.xy);\n  vec4 color3 = texture2D(cc_spriteTexture, v_uv2.zw);\n  float w = color0.a * color1.a * color2.a * color3.a;\n  #if USE_HIGH_SAMPLER\n    vec4 color4 = texture2D(cc_spriteTexture, v_uv3.xy);\n    vec4 color5 = texture2D(cc_spriteTexture, v_uv3.zw);\n    vec4 color6 = texture2D(cc_spriteTexture, v_uv4.xy);\n    vec4 color7 = texture2D(cc_spriteTexture, v_uv4.zw);\n    w *= color4.a * color5.a * color6.a * color7.a;\n  #endif\n  vec4 color = texture2D(cc_spriteTexture, v_uv0);\n  color.xyz = mix(_LineColor.rgb, color.rgb, w);\n  color *= v_vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":47}},"defines":[{"name":"USE_HIGH_SAMPLER","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"}]}],[{"passes":[{"program":"../Shaders/sprite-outline|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"_LineColor":{"type":16,"value":[1,1,1,1]},"_LineWidth":{"type":13,"value":[0.1]},"_TexelSize":{"type":14,"value":[0.001,0.001]}}}]}]]],0,0,[],[],[]],[[[1,"sprite-outline",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_HIGH_SAMPLER":true}],[[[{"alphaThreshold":0,"_LineWidth":5},"_LineColor",8,[4,4282908416]]],11]]],0,0,[0],[0],[0]]]]
