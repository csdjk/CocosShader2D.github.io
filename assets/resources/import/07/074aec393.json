[1,["c5hhi0ByBAMLQQ6ylteh9l"],["_effectAsset"],[["cc.Material",["_name","_props","_states","_defines"],-1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,5],[1,0,1,2,4]],[[[[0,"sprite-shv",[{"alphaThreshold":0}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_SATURATION":true,"USE_CONTRAST":true,"USE_OLDPHOTO":true}]]],0,0,[0],[0],[0]],[[[1,"../Shaders/sprite-shv",[{"hash":4168466889,"name":"../Shaders/sprite-shv|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"brightness","type":13,"count":1},{"name":"saturation","type":13,"count":1},{"name":"contrast","type":13,"count":1},{"name":"oldPower","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 vertexColor;\nout vec2 uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  vertexColor = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#ifndef COLOR_INCLUDE\n#define COLOR_INCLUDE\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat Luminance(vec3 color) {\n  return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\n}\nfloat Luminance(vec4 color) {\n  return Luminance(color.rgb);\n}\nvec3 OldPhotoColor(vec3 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec3(r, g, b);\n}\n#endif\nin vec4 vertexColor;\nin vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nlayout(std140) uniform Constant {\n  float brightness;\n  float saturation;\n  float contrast;\n  float oldPower;\n};\nvec4 frag() {\n  vec4 color = texture(cc_spriteTexture, uv0);\n  color.rgb *= brightness;\n  #if USE_SATURATION\n    float luminance = Luminance(color.rgb);\n    vec3 luminanceColor = vec3(luminance, luminance, luminance);\n    color.rgb = mix(luminanceColor, color.rgb, saturation);\n  #endif\n  #if USE_CONTRAST\n    color.rgb = mix(vec3(0.5, 0.5, 0.5), color.rgb, contrast);\n  #endif\n  #if USE_OLDPHOTO\n    color.rgb = mix(color.rgb, OldPhotoColor(color.rgb), oldPower);\n  #endif\n  color *= vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 vertexColor;\nvarying vec2 uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  vertexColor = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#ifndef COLOR_INCLUDE\n#define COLOR_INCLUDE\nfloat Luminance(vec3 color) {\n  return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\n}\nfloat Luminance(vec4 color) {\n  return Luminance(color.rgb);\n}\nvec3 OldPhotoColor(vec3 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec3(r, g, b);\n}\n#endif\nvarying vec4 vertexColor;\nvarying vec2 uv0;\nuniform sampler2D cc_spriteTexture;\n   uniform float brightness;\n   uniform float saturation;\n   uniform float contrast;\n   uniform float oldPower;\nvec4 frag() {\n  vec4 color = texture2D(cc_spriteTexture, uv0);\n  color.rgb *= brightness;\n  #if USE_SATURATION\n    float luminance = Luminance(color.rgb);\n    vec3 luminanceColor = vec3(luminance, luminance, luminance);\n    color.rgb = mix(luminanceColor, color.rgb, saturation);\n  #endif\n  #if USE_CONTRAST\n    color.rgb = mix(vec3(0.5, 0.5, 0.5), color.rgb, contrast);\n  #endif\n  #if USE_OLDPHOTO\n    color.rgb = mix(color.rgb, OldPhotoColor(color.rgb), oldPower);\n  #endif\n  color *= vertexColor;\n  ALPHA_TEST(color);\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":44,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":49}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_SATURATION","type":"boolean"},{"name":"USE_CONTRAST","type":"boolean"},{"name":"USE_OLDPHOTO","type":"boolean"}]}],[{"passes":[{"program":"../Shaders/sprite-shv|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"brightness":{"type":13,"value":[1]},"saturation":{"type":13,"value":[1]},"contrast":{"type":13,"value":[1]},"oldPower":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]]]]
